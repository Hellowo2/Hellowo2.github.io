---
layout: post
title: '顺序表和单链表合成一个有序表及相关操作'
date: 2020-09-12
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 线性结构
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
#define SIZE 100    //输入的个数最多100
typedef struct
{
    ElemType *data; //指向开辟的一段连续空间的首地址
    int length;     //记录顺序表长度
    int listsize;   //顺序表最多容量
}sqlist;

typedef struct node
{
	ElemType data;     //存储结点数据
	struct node *next;  //指向下一个结点地址
}slink;

//对顺序表初始化赋值
int initlist(sqlist *L1)
{
    L1->data=(ElemType *)malloc(sizeof(ElemType)*SIZE);
    if(!L1->data)   //开辟空间失败
    {
        printf("error");
        return 0;
    }
    L1->length=0;
    L1->listsize=SIZE;
    return 0;
}
//创建顺序表
int creatlist(sqlist *L1)
{
    int n;  //存储输入数据的个数
    printf("输入顺序表的长度(不得超过100个): ");
    scanf("%d",&n);
    printf("请输入%d数据: ",n);
    for(int i=0;i<n;i++)    //for循环内输入n个数据
    {
        if(L1->length==L1->listsize)    //顺序表容量已满
        {
            realloc(L1->data,(L1->length+1)*sizeof(ElemType));
            if(!L1->data)
            {
                printf("error");
                return 0;
            }
            L1->listsize++; //容量加一
        }
        scanf("%d",&L1->data[i]);
        L1->length++;   //长度加一
    }
    return 0;
}

//输出函数
int output(sqlist *L1)
{
    int i;  //用于遍历
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    printf("\n");
    if(i==0)
    printf("空表\n");
    return 0;
}
//升序顺序表-直接插入法
int insersort(sqlist *L)
{
    int i,j,temp;
    for(i=1;i<L->length;i++)
    {
        if(L->data[i]<L->data[i-1])
        {
            temp=L->data[i];
            for(j=i-1;L->data[j]>temp && j>=0;j--)
            {
                L->data[j+1]=L->data[j];
            }
            L->data[j+1]=temp;
        }
    }
    printf("直接插入排序后的数据:   ");
    output(L);
}

//升序顺序表-冒泡法
int Bubblesort(sqlist *L1)
{
    ElemType x;
    int i,j,m=1;
    for(i=0;m&&i<L1->length-1;i++)
    {
        for(j=0,m=0;j<L1->length-1-i;j++)
        {
            if(L1->data[j]>L1->data[j+1])
            {
                int t;
                t=L1->data[j];
                L1->data[j]=L1->data[j+1];
                L1->data[j+1]=t;
                m=1;
            }
        }
    }
    printf("冒泡排序后的数据:   ");
    output(L1);
}
//升序顺序表-简单选择排序法
int selectsort(sqlist *L)
{
    int i,j,k;
    for(i=0;i<L->length-1;i++)
    {
        k=i;
        for(j=i+1;j<L->length;j++)
        {
            if(L->data[j]<L->data[k])
            k=j;
        }
        if(k!=i)
        {
            int t;
            t=L->data[i];
            L->data[i]=L->data[k];
            L->data[k]=t;
        }
    }
    for(i=0;i<L->length;i++)
    printf("%d\t",L->data[i]);
    printf("简单选择排序后的数据:   ");
    output(L);
}
//链表输出函数
int list(slink *head)
{
	slink *p;
	if(head->next==NULL||head==NULL)
	{
		printf("空表  错误");
		system("pause");
		return 0;
	}
	p=head->next;
	while(p!=NULL)  //遍历每个结点
	{
		printf("%d\t",p->data);
		p=p->next;
	}
	return 0;
}
//创建一个链表
int initslink(slink *L)
{
    int i;
    slink *head=L,*s;   //指针s用于存储新结点数据
    L->next=NULL;
    int n;  //记录数据个数
    printf("输入链表个数: ");
    scanf("%d",&n);
    printf("输入%d个数据: ",n);
    for(i=0;i<n;i++)
    {
        s=(slink *)malloc(sizeof(slink));
        scanf("%d",&s->data); 
        if(L->next==NULL)   //空链表
        {
            s->next=L->next;
            L->next=s;
        }
        else
        {
            L=head;
            while(L->next!=NULL)    //遍历链表
            {
                if(s->data>=L->next->data)  //插入的结点数据与原本的链表数据作比较
                {
                    s->next=L->next;
                    L->next=s;
                    break;
                }
                L=L->next;
            }
            if(L->next==NULL)   //新插入的结点数据最小
            {
                s->next=L->next;
                L->next=s;
            }
        }      
    }
}

//链表逆置函数
int reverse(slink *head)
{
    slink *p,*q;
    p=head->next;
    head->next=NULL;    //空表
    while(p!=NULL)
    {
        q=p->next;  //存储插入结点p的下一个结点
        p->next=head->next;
        head->next=p;
        p=q;
    }
}

//单链表，顺序表合并数据，并成为一个有序表
int sqlist_slink(sqlist *L,slink *L1,slink *L2)
{
    int i=0;
    slink *q,*s,*p;
    q=L1->next;
    while(i<L->length && q!=NULL)
    {
        if(L->data[i]>q->data)//链表L的结点插入L2中
        {
            p=q->next;
            L2->next=q;
            L2=q;
            q=p;
        }
        else    //顺序表的结点数据插入L2中
        {
            s=(slink *)malloc(sizeof(slink));   //开辟新结点存储顺序表的结点数据
            s->data=L->data[i];
            L2->next=s;
            L2=s;
            i++;
        }
    }
    while(i<L->length)  //链表已遍历完
    {
        s=(slink *)malloc(sizeof(slink));
        s->data=L->data[i];
        L2->next=s;
        L2=s;
        i++;
    }
    while(q!=NULL)  //顺序表已遍历完
    {
        p=q->next;
        L2->next=q;
        L2=q;
        q=p;
    }
    L2->next=NULL;
}
int main()
{
    int kind;
    sqlist L;
    slink L1;
    slink L2;
    initlist(&L);
    creatlist(&L);
    printf("排序方法有\n");
    printf("输入1进行直接插入排序\n");
    printf("输入2进行冒泡排序\n");
    printf("输入3进行简单选择排序\n");
    printf("请输入你的选择: ");
    scanf("%d",&kind);
    switch (kind)
    {
    case 1:
        insersort(&L);
        break;
    case 2:
        Bubblesort(&L);
        break;
    case 3:
        selectsort(&L);
        break;        
    default:
        printf("输入错误,重新输入\n");
        break;
    }
    initslink(&L1);
    printf("链表输出结果为: ");
    list(&L1);
    printf("\n链表逆置结果为 :");
    reverse(&L1);
    list(&L1);
    sqlist_slink(&L,&L1,&L2);
    printf("\n合并结果为: ");
    list(&L2);
    system("pause");
}
```
