---
layout: post
title: '顺序表各函数功能实现编程'
date: 2020-09-12
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 顺序存储
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
#define SIZE 100
typedef struct
{
    ElemType *data;
    int length;
    int listsize;
}sqlist;

int initlist(sqlist *L1)
{
    L1->data=(ElemType *)malloc(sizeof(ElemType)*SIZE);
    if(!L1->data)
    {
        printf("error");
        return 0;
    }
    L1->length=0;
    L1->listsize=SIZE;
    printf("初始化成功\n");
    system("pause");
    return 0;
}

int creatlist(sqlist *L1)
{
    ElemType x;
    int n;
    printf("输入顺序表的长度");
    scanf("%d",&n);
    printf("请输入你的数据\n");
    for(int i=0;i<n;i++)
    {
        if(L1->length==L1->listsize)
        {
            realloc(L1->data,(L1->length+1)*sizeof(ElemType));
            if(!L1->data)
            {
                printf("error");
                return 0;
            }
            L1->listsize++;
        }
        scanf("%d",&L1->data[i]);
        L1->length++;
    }
    printf("创建成功\n");
    system("pause");
    return 0;
}

int getlen(sqlist *L1)
{
    printf("%d\n",L1->length);
    system("pause");
    return 0;
}

int getelem(sqlist *L1)
{
    int i,j;
    printf("请输入你想要数据的位序");
    scanf("%d",&i);
    if(i<1||i>L1->length)
    {
        printf("error");
        return 0;
    }
    for(j=0;j<i-1;j++);
    printf("对应的数据为%d\n",L1->data[j]);
    system("pause");
    return 0;
}

int locate(sqlist *L1)
{
    ElemType x;
    int i;
    printf("输入你想要定位的数据");
    scanf("%d",&x);
    for(i=0;i<L1->length;i++)
    {
        if(L1->data[i]==x)
        {
            printf("该数据的位序为%d\n",i+1);break;
        }
    }
    if(i==L1->length)
    printf("找不到该数据\n");
    system("pause");
    return 0;
}

int del(sqlist *L1)
{
    int i,j,t;
    printf("删除前的数据为\n");
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    printf("\n输入你想要删除数据的位序\n");
    scanf("%d",&t);
    if(t<1||t>L1->length)
    {
        printf("error");
        return 0;
    }
    printf("你要删除的数据为%d",L1->data[t-1]);
    for(j=t-1;j<L1->length-1;j++)
    {
        L1->data[j]=L1->data[j+1];
    }
    L1->length--;
    printf("删除后的数据为\n");
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    printf("\n");
    system("pause");
    return 0;
}

int insert(sqlist *L1)
{
    int i,t,j;
    ElemType x;
    printf("插入前的数据为");
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    printf("\n输入在第几个结点插入数据");
    scanf("%d",&t);
    printf("添加的数据为:");
    scanf("%d",&x);
    if(t<1||t>L1->length+1)
    {
        printf("error");
        return 0;
    }
    if(L1->length==L1->listsize)
    {
        realloc(L1->data,(L1->length+1)*sizeof(ElemType));
        if(!L1->data)
        {
            printf("error");
            return 0;
        }
        L1->listsize++ ;  
    }
    for(j=L1->length;j>t-1;j--)
    {
        L1->data[j]=L1->data[j-1];
    }
    L1->data[t-1]=x;
    L1->length++;
    printf("插入后的数据为");
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    printf("\n");
    system("pause");
    return 0;
}

int hjx()
{
	int i;
	printf("输入1初始化顺序表\n");
	printf("输入2创建长度为n的顺序表\n");
	printf("输入3可得顺序表长度\n");
    printf("输入4可得输入位序对应的数据\n");
	printf("输入5可得输入数据的的位序\n");
	printf("输入6可删除元素\n");
	printf("输入7可插入元素\n");
	printf("输入8输出数据\n");
	printf("输入9释放链表\n\n");
	printf("输入想要选择的功能");
	scanf("%d",&i);
	return i;
}

int release(sqlist *L1)
{
    free(L1->data);
    L1->listsize=0;
    L1->length=0;
    printf("释放成功\n");
    system("pause");
    return 0;
}


int output(sqlist *L1)
{
    int i;
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    if(i==0)
    printf("空表");
    system("pause");
    return 0;
}


int main()
{
    sqlist L;
	for(;;)
	{
		system("cls");
		switch(hjx())
		{
			case 1:
			initlist(&L);continue;
			case 2:
			creatlist(&L);continue;
			case 3:
			getlen(&L);
			continue;
			case 4:
			getelem(&L);
			continue;
			case 5:
			locate(&L);continue;
			case 6:
			del(&L);continue;
			case 7:
			insert(&L);continue;
			case 8:
			output(&L);continue;
			case 9:
			release(&L);continue;
		}
		system("pause");
	}
}
```
