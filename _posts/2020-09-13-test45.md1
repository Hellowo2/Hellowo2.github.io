---
layout: post
title: '图的邻接矩阵'
date: 2020-09-12
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 图
---
```c
#include<stdio.h>
#include<stdlib.h>
#define Max 10		//预设最多顶点数
typedef struct
{
	int vexnum,arcnum,kind;		//顶点数，边(或弧)信息及图的种类	
	char vex[Max];			//存顶点信息的一维数组
	int arc[Max][Max];		//存边(或弧)信息的二维数组
}AdjMatrix;				//邻接矩阵存储结构类型名

//建立图的邻接矩阵
int Creadjm(AdjMatrix *G)
{
	int i,j,k;
	printf("输入顶点数，边数和图的种类(0为无向图,1为有向图):");
	scanf("%d%d%d",&G->vexnum,&G->arcnum,&G->kind);
	for(k=0;k<G->vexnum;k++)
	{
		G->vex[k]='A'+k;
	}
	for(i=0;i<G->vexnum;i++)
	{
		for(j=0;j<G->vexnum;j++)
		{
			G->arc[i][j]=0;
		}
	}
	printf("请输入%d个边\n",G->arcnum);
	for(k=0;k<G->arcnum;k++)
	{
		scanf("%d%d",&i,&j);
		G->arc[i][j]=1;
		if(G->kind==0)
		{
			G->arc[j][i]=1;
		}
	}
}

//输出函数
int list(AdjMatrix *G)
{
	int i,j;
	for(i=0;i<G->vexnum;i++)
	{
		printf("\t%c",G->vex[i]);
	}
	printf("\n");
	for(i=0;i<G->vexnum;i++)
	{
		printf("%c",G->vex[i]);
		for(j=0;j<G->vexnum;j++)
		{
			printf("\t%d",G->arc[i][j]);
		}
		printf("\n");
	}
	system("pause");
}

//主函数
int main()
{
	AdjMatrix G;
	Creadjm(&G);
	list(&G);
}
```
