---
layout: post
title: '顺序队列各函数实现功能编程'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 顺序存储 队列
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
#define maxsize 5
typedef struct hhh
{
    ElemType *data;
    int front;
    int rear;
    int queuesize;
}cqueue;

int initqueue(cqueue *head)
{
    head->data=(ElemType *)malloc(sizeof(ElemType)*maxsize);
    if(!head->data)
    return 0;
    head->front=head->rear=0;
    head->queuesize=maxsize;
    printf("初始化成功\n");
    system("pause");
    return 0;
}

int creatqueue(cqueue *head)
{
    int n,i;
    printf("输入你想要创建队列的空间容量大小\n");
    scanf("%d",&n);
    if(n<0)
    return 0;
    printf("请输入你的数据:(数据的个数为:空间容量大小-1)\n");
    for(i=0;i<n-1;i++)
    {
        if(head->rear+1==head->queuesize)
        {
            realloc(head->data,n*sizeof(ElemType));
            if(!head->data)
            return 0;
            head->queuesize=n;
        }
        scanf("%d",&head->data[i]);
        head->rear++;
    }
    printf("创建成功\n");
    system("pause");
    return 0;
}

int getlen(cqueue *head)
{
    printf("长度为\n");
    printf("%d\n",(head->rear-head->front+head->queuesize)%head->queuesize);
    system("pause");
    return 0;
}

int getfront(cqueue *head)
{
    ElemType x;
    if(head->front==head->rear)
    {
        printf("空队列\n");
        system("pause");
        return 0;
    }
    x=head->data[head->front];
    printf("队列头元素为%d\n",x);
    return 0;
}

int inqueue(cqueue *head)
{
    ElemType x;
    if((head->rear+1)%head->queuesize==head->front)
    {
        printf("队列满\n");
        system("pause");
        return 0;
    }
    printf("输入入队列的数据:\n");
    scanf("%d",&x);
    head->data[head->rear]=x;
    head->rear=(head->rear+1)%head->queuesize;
    printf("入队列成功\n");
    system("pause");
    return 0;
}

int outqueue(cqueue *head)
{
    ElemType x;
    if(head->front==head->rear)
    {
        printf("队列空\n");
        system("pause");
        return 0;
    }
    x=head->data[head->front];
    head->front=(head->front+1)%head->queuesize;
    printf("出队列成功\n");
    printf("出列的数据为%d\n",x);
    system("pause");
    return 0;
}

int emptyqueue(cqueue *head)
{
    if(head->rear==head->front)
    printf("空队列\n");
    else
    {
        printf("非空对列\n");
    }
    system("pause");
    return 0;
}

int output(cqueue *head)
{
    if(head->front==head->rear)
    {
        printf("空队列\n");
        system("pause");
        return 0;
    }
    int i=head->front;
    while(i!=head->rear)
    {
        printf("%d\t",head->data[i]);
        i=(i+1)%head->queuesize;
    }
    printf("\n输出成功\n");
    system("pause");
    return 0;
}

int hjx()
{
    int i;
    printf("输入1初始化顺序队列\n");
    printf("输入2创建长度为n的顺序队列表\n");
    printf("输入3可得顺序队列表的长度\n");
    printf("输入4可得顺序队列的表头元素\n");
    printf("输入5对顺序队列入列\n");
    printf("输入6对顺序队列出列\n");
    printf("输入7判断是否空队列\n");
    printf("输入8输出顺序队列表的值\n\n");
    printf("请输入想要选择的功能\n");
    scanf("%d",&i);
    if(i<1||i>8)
    return 0;
    return i;
}

int main()
{
    cqueue L;
    ElemType x;
    for(;;)
    {
        system("cls");
        switch(hjx())
        {
            case 1:
            initqueue(&L);continue;
            case 2:
            creatqueue(&L);continue;
            case 3:
            getlen(&L);continue;
            case 4:
            getfront(&L);
            system("pause");continue;
            case 5:
            inqueue(&L);continue;
            case 6:
            outqueue(&L);
            system("pause");continue;
            case 7:
            emptyqueue(&L);continue;
            case 8:
            output(&L);continue;
        }
    }
}

```
