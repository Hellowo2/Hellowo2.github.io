---
layout: post
title: '链栈各函数实现编程'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 链式结构 栈
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
typedef struct hhh
{
    ElemType data;
    struct hhh *next;
}linkstack;

linkstack *initstack()
{
    linkstack *head;
    head=(linkstack *)malloc(sizeof(linkstack));
    if(!head)
    {
        printf("error");
        return 0;
    }
    head->next=NULL;
    system("pause");
    return head;
}

int creatstack(linkstack *head)
{
    linkstack *p,*q;
    int n,i;
    if(head==NULL)
    return 0;
    p=head;
    printf("请输入链栈的长度:\n");
    scanf("%d",&n);
    if(n<0)
    return 0;
    printf("请输入链栈的数据:\n");
    for(i=0;i<n;i++)
    {
        q=(linkstack *)malloc(sizeof(linkstack));
        if(!q)
        return 0;
        scanf("%d",&q->data);
        q->next=p->next;
        p->next=q;
    }
    printf("创建成功\n");
    system("pause");
    return 0;
}

int getlen(linkstack *head)
{
    int i=0;
    linkstack *p;
    if(head->next==NULL)
    {
        printf("空栈");
        system("pause");
        return 0;
    }
    p=head->next;
    for(;p!=NULL;)
    {
        i++;
        p=p->next;
    }
    printf("链栈的长度为%d",i);
    return 0;
}

int getelem(linkstack *head,ElemType *e)
{
    if(head->next==NULL)
    {
        printf("空栈\n");
        system("pause");
        return 0;
    }
    *e=head->next->data;
    return 0;
}

int push(linkstack *head,ElemType *e)
{
    linkstack *p,*q;
    p=head;
    q=(linkstack *)malloc(sizeof(linkstack));
    if(!q)
    return 0;
    q->data=*e;
    q->next=p->next;
    p->next=q;
    printf("压栈成功\n");
    return 0;
}

int pop(linkstack *head,ElemType *e)
{
    linkstack *q;
    if(head->next==NULL)
    {
        printf("空栈\n");
        return 0;
    }
    q=head->next;
    head->next=q->next;
    *e=q->data;
    free(q);
    printf("出栈成功\n");
    return 0;
}

int emptystack(linkstack *head)
{
    if(head->next==NULL)
    printf("空栈\n");
    else
    {
        printf("非空栈\n");
    }
    system("pause");
    return 0;
}

int list(linkstack *head)
{
    if(head->next==NULL)
    {
        printf("空栈\n");
        return 0;
    }
    linkstack *p;
    p=head->next;
    printf("栈表的数据为:\n");
    while(p!=NULL)
    {
        printf("%d\t",p->data);
        p=p->next;
    }
    system("pause");
    return 0;
}

int hjx()
{
    int i;
    printf("输入1初始化链栈表\n");
    printf("输入2创建长度为n的链栈表\n");
    printf("输入3可得链栈表的长度\n");
    printf("输入4可得链栈表的栈顶元素\n");
    printf("输入5对链栈表入栈\n");
    printf("输入6对链栈表出栈\n");
    printf("输入7判断是否空栈\n");
    printf("输入8输出链栈表的值\n\n");
    printf("请输入想要选择的功能\n");
    scanf("%d",&i);
    if(i<1||i>8)
    return 0;
    return i;
}

int main()
{
    linkstack *L;
    ElemType x;
    for(;;)
    {
        system("cls");
        switch(hjx())
        {
            case 1:
            L=initstack();continue;
            case 2:
            creatstack(L);continue;
            case 3:
            getlen(L);continue;
            case 4:
            getelem(L,&x);
            printf("取的栈顶元素为%d",x);
            system("pause");continue;
            case 5:
            printf("输入入栈的数据:\n");
            scanf("%d",&x);
            push(L,&x);continue;
            case 6:
            pop(L,&x);
            printf("出栈的数据为:%d",x);
            system("pause");continue;
            case 7:
            emptystack(L);continue;
            case 8:
            list(L);continue;
        }
    }
    system("pause");
}

```
