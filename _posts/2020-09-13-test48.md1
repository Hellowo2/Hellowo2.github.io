---
layout: post
title: '图的最短路径-Dijkstra(迪杰斯特拉算法)'
date: 2020-09-12
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 图 最短路径
---
```c
#include<stdio.h>
#include<stdlib.h>
#define INFINITE 1000
#define Max 10		//预设最多顶点数
typedef struct
{
	int vexnum,arcnum,kind;		//顶点数，边(或弧)信息及图的种类	
	char vex[Max];			//存顶点信息的一维数组
	int arc[Max][Max];		//存边(或弧)信息的二维数组
}AdjMatrix;				//邻接矩阵存储结构类型名

//建立图的邻接矩阵
int Creadjm(AdjMatrix *G)
{
	int i,j,k,t;
	printf("输入顶点数，边数和图的种类(0为无向图,1为有向图):");
	scanf("%d%d%d",&G->vexnum,&G->arcnum,&G->kind);
	for(k=0;k<G->vexnum;k++)
	{
		G->vex[k]='A'+k;
	}
	for(i=1;i<=G->vexnum;i++)
	{
		for(j=1;j<=G->vexnum;j++)
		{
			G->arc[i][j]=1000;
		}
	}
	printf("请输入%d个边,1代表A,2代表B...以及对应的权值\n",G->arcnum);
	for(k=1;k<=G->arcnum;k++)
	{
		scanf("%d%d%d",&i,&j,&t);
		G->arc[i][j]=t;
		if(G->kind==0)
		{
			G->arc[j][i]=t;
		}
	}
}

//输出函数
int list(AdjMatrix *G)
{
	int i,j;
	for(i=0;i<G->vexnum;i++)
	{
		printf("\t%c",G->vex[i]);
	}
	printf("\n");
	for(i=1;i<=G->vexnum;i++)
	{
		printf("%c",G->vex[i-1]);
		for(j=1;j<=G->vexnum;j++)
		{
			printf("\t%d",G->arc[i][j]);
		}
		printf("\n");
	}
	//system("pause");
}


void shortpath(int ad[][Max],int v0,int n)
//图用邻接矩阵来存储，下标从1开始，v0是源点
{
    int i,j,k,min;
    int visited[Max];
    int pre[Max];
    int dist[Max];
    int path[Max];
    for(i=1;i<=n;i++)
    {
        visited[i]=0;
        dist[i]=ad[v0][i];
        if(dist[i]<INFINITE)
        pre[i]=v0;
        else
        {
            pre[i]=0;
        }
    }
    pre[v0]=0;
    visited[v0]=1;
    //计算最短路径
    for(j=1;j<=n-1;j++)
    {
        min=INFINITE;
        for(i=1;i<=n;i++)
        {
            if(visited[i]==0 && dist[i]<min)
            {
                k=i;
                min=dist[i];
            }
        }
        visited[k]=1;
        for(i=1;i<=n;i++)
        {
            if(visited[i]==0 && dist[k]+ad[k][i]<dist[i])
            {
                dist[i]=dist[k]+ad[k][i];
                pre[i]=k;   //下标为i的结点的最短路径的前一个结点的下标为k
            }
        }
    }
    //输出各个结点到v0的最短路径
    for(i=1;i<=n;i++)
    {
        if(i==v0)
        continue;
        path[0]=i;j=i;k=1;  
        while(pre[j]!=v0)       //用path数组存储结点下标为j到v0的最短路径之间的下标
        {
            path[k++]=pre[j];
            j=pre[j];
        }
        path[k++]=v0;
        printf("The shortpath from %d to %d:",v0,i);
        for(j=0;j<k;j++)
        {
            printf("%4d",path[j]);
        }
        printf("\tThe length:%d\n",dist[i]);
    }
}

//主函数
int main()
{
    int v0;
	AdjMatrix G;
	Creadjm(&G);
	list(&G);
    printf("\n");
    printf("输入最短路径的源点:\n");
    scanf("%d",&v0);
    shortpath(G.arc,v0,G.vexnum);
    system("pause");
}
```
