---
layout: post
title: '链串操作(未完善)'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 链串 链式存储
---
```c
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct hhh
{
    char ch;
    struct hhh *next;
}linkstr;

//初始化操作
linkstr*initstring()
{
    linkstr *s;
    s=(linkstr *)malloc(sizeof(linkstr));
    if(!s)
    {
        return 0;
    }
    s->next=NULL;
    return s;
}

//创建长度为n的链串
int creatstr(linkstr *s)
{
    linkstr *p,*q;
    p=s;
    int n,i;
    printf("请输入长度:\n");
    scanf("%d",&n);
    printf("请输入链串的数据:\n");
    for(i=0;i<n;i++)
    {
        q=(linkstr *)malloc(sizeof(linkstr));
        if(!q)
        {
            return 0;
        }
        scanf("%c",&q->ch);
        fflush(stdin);
        q->next=p->next;
        p->next=q;
        q=p;
    }
    printf("创建成功:\m");
    system("pause");
    return 0;
}

//串赋值操作,将一个字符串常量t赋值给字符串变量s
int strassign(linkstr *s,char *t)
{
    int i;
    linkstr *p,*q,*r;
    r=s;
    q=s->next;
    for(i=0;t[i]!='\0';i++)
    {
        if(q!=NULL)
        {
            q->ch=t[i];
            r=q;
            q=q->next;
        }
        else
        {
            p=(linkstr *)malloc(sizeof(linkstr));
            p->ch=t[i];
            r->next=p;
            r=p;
        }
    }
    r->next=NULL;
    while(q!=NULL)
    {
        p=q->next;
        free(q);
        q=p;
    }    
}

//计算串的长度
int length(linkstr *s)
{
    linkstr *p;
    int i=0;
    p=s->next;
    while(p!=NULL)
    {
        i++;
        p=p->next;
    }
    printf("串的长度为%d\n",i);
    system("pause");
    return i;
}

//判等操作,判断两个串是否相等
int equal(linkstr *s,linkstr *t)
{
    linkstr *p,*q;
    p=s->next;
    q=t->next;
    while(p!=NULL && q!=NULL)
    {
        if(p!=q)
        {
            printf("不相等\n");
            system("pause");
            return 0;
        }
        p=p->next;
        q=q->next;
    }
    if(p!=NULL || q!=NULL)
    {
        printf("不相等\n");
        system("pause");
        return 0;
    }
    else
    {
        printf("相等\n");
        system("pause");
        return 0;
    }    
}

//连接操作,将串s2连接到串s1的后面,结果存到串s
int concat(linkstr *s,linkstr *s1,linkstr *s2)
{
    linkstr *p,*q,*r,*u;
    p=s->next;
    q=s1->next;
    r=s;
    while(q!=NULL)
    {
        if(p!=NULL)
        {
            p->ch=q->ch;
            r=p;
            p=p->next;
        }
        else
        {
            u=(linkstr *)malloc(sizeof(linkstr));
            u->ch=q->ch;
            r->next=u;
            r=u;
        }
        q=q->next;
    }
    q=s2->next;
    while(q!=NULL)
    {
        if(p!=NULL)
        {
            p->ch=q->ch;
            r=p;
            p=p->next;
        }
        else
        {
            u=(linkstr *)malloc(sizeof(linkstr));
            u->ch=q->ch;
            r->next=u;
            r=u;
        }
        q=q->next;
    }
    r->next=NULL;
    while(p!=NULL)
    {
        q=p->next;
        free(p);
        p=q;
    }
    printf("连接成功\n");
    system("pause");
    return 0;
}

//取子串操作,将串s的从第i个字符开始的连续j个字符存到t中
int substr(linkstr *s,int i,int j,linkstr *t)
{
    int k;
    linkstr *p,*q,*r,*u;
    if(i<=0 || i>length(s) || j<=0 && j>length(s)-i+1)
    return 0;
    for(k=0,p=s;k<j;k++)
    {
        p=p->next;
    }
    for(k=0,r=t,q=t->next;k<j;k++)
    {
        if(q!=NULL)
        {
            p->ch=q->ch;
            r=q;
            q=q->next;
        }
        else
        {
            u=(linkstr *)malloc(sizeof(linkstr));
            u->ch=p->ch;
            r->next=u;
            r=u;
        }
        p=p->next;
    }
    while(q!=NULL)
    {
        p=q->next;
        free(q);
        q=p;
    }
    printf("取子串成功\n");
    system("pause");
    return 0;
}

//插入操作,在串s的第i个位置之前插入子串t
int insert(linkstr *s,int i,linkstr *t)
{
    int j;
    linkstr *p,*q,*r;
    if(i<=0 || i>length(s)+1)
    return 0;
    for(j=0,r=s;j<i-1;j++)
    {
        r=r->next;
    }
    p=t->next;
    while(p!=NULL)
    {
        q=(linkstr *)malloc(sizeof(linkstr));
        if(!q)
        return 0;
        q->ch=p->ch;
        q->next=r->next;
        r->next=q;
        r=q;
        p=p->next;
    }
    printf("插入成功\n");
    system("pause");
    return 0;
}

//删除操作,删除链串s的从第i个字符开始的连续j个字符
int del(linkstr *s,int i,int j)
{
    int k;
    linkstr *p,*q,*r;
    if(i<=0 || i>length(s) || j<=0 || j>length(s)-i+1)
    return 0;
    p=s;
    for(k=0;k<i-1;k++)
    {
        p=p->next;
    }
    for(k=1;k<=j;k++)
    {
        q=p->next;
        p->next=q->next;
        free(q);
    }
    printf("删除成功\n");
    system("pause");
    return 0;
}

//替换操作,将链串s的从第i个字符开始的连续j个字符用串t替换
int replace(linkstr *s,int i,int j,linkstr *t)
{
    if(i<=0 || i>length(s) || j<=0 || j>length(s)-i+1)
    {
        return 0;
    }
    int k;
    linkstr *p1,*p2,*q,*r,*f;
    for(k=0,r=s;k<i-1;k++)
    {
        r=r->next;
    }
    for(k=0,p1=r;k<=j;k++)
    {
        p1=p1->next;
    }
    f=r->next;
    p2=t->next;
    while(p2!=NULL)
    {
        if(f!=p1)
        {
            f->ch=p2->ch;
            r=f;
            f=f->next;
        }
        else
        {
            q=(linkstr *)malloc(sizeof(linkstr));
            q->ch=p2->ch;
            r->next=q;
            r=q;
        }
        p2=p2->next;   
    }
    r->next=p1;
    printf("替换成功\n");
    system("pause");
    return 0;
}

//输出操作,输出串s的值
int list(linkstr *s)
{
    linkstr *p;
    p=s;
    while(p->next!=NULL)
    {
        p=p->next;
        printf("%c\t",p->ch);
    }
    printf("\n输出成功\n");
    system("pause");
    return 0;
}

int main
{
    
}

```
