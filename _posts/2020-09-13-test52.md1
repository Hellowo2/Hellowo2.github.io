---
layout: post
title: '某坤的二叉树'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 二叉树
---
```c
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<time.h>

#define MaxSize 7

typedef int ElemType;

//指针和数据域
typedef struct BTNode
{
    ElemType data;//数据元素
    struct BTNode* lchild;//指向左孩子结点
    struct BTNode* rchild;//指向右孩子结点
}BTNode;

typedef struct
{ //树根
    BTNode* root;
} Tree;

/*1.创建二叉树*/
void CreateBTree(Tree* tree, int value)//创建树
{
    BTNode* node = (BTNode*)malloc(sizeof(BTNode));//创建一个节点
    node->data = value;
    node->lchild = NULL;
    node->rchild = NULL;
    if (tree->root == NULL)//判断树是不是空树
    {
        tree->root = node;
    }
    //规定这个树的父节点小于右儿子又大于左儿子
    //左<父<右
    else {//不是空树
        BTNode* temp = tree->root;//从树根开始
        while (temp != NULL)
        {
            if (value < temp->data)//小于就进左儿子
            {
                if (temp->lchild == NULL)
                {
                    temp->lchild = node;;
                    return;
                }
                else {//继续判断
                    temp = temp->lchild;
                }
            }
            else {//否则进右儿子
                if (temp->rchild == NULL)
                {
                    temp->rchild = node;

                    return;
                }
                else {//继续判断
                    temp = temp->rchild;
                }
            }
        }
    }
    return;
}

/*2.销毁二叉树*/
void DestroyBTree(BTNode* b)
{
    if (b != NULL)
    {
        DestroyBTree(b->lchild);
        DestroyBTree(b->rchild);
        free(b);
    }
}

/*3.查找结点*/
BTNode* FindNode(BTNode* b, ElemType x)
{
    BTNode* p;
    if (b == NULL)
    {
        return NULL;
    }
    else if (b->data == x)
    {
        return  b;
    }
    else
    {
        p = FindNode(b->lchild, x);
        if (p != NULL)
        {
            return p;
        }
        else
        {
            return FindNode(b->rchild, x);
        }
    }
}

/*4.找孩子结点*/
BTNode* LchildNode(BTNode* p)//返回结点p的左孩子的指针
{
    return p->lchild;
}
BTNode* RchildNode(BTNode* p)//返回结点p的右孩子的指针
{
    return p->rchild;
}

/*5.求高（深）度*/
int BTHeight(BTNode* b)
{
    int lchildh, rchildh;
    if (b == NULL)
    {
        return (0);
    }
    else
    {
        lchildh = BTHeight(b->lchild);//求左子树的高度为lchildh
        rchildh = BTHeight(b->rchild);//求右子树的高度为rchildh
        return (lchildh > rchildh) ? (lchildh + 1) : (rchildh + 1);
    }
}

/*6.输出二叉树*/
void DispBTree(BTNode* b)
{
    if (b != NULL)
    {
        printf("%c", b->data);
        if (b->lchild != NULL || b->rchild != NULL)
        {
            printf("(");
            DispBTree(b->lchild);
            if (b->rchild != NULL)
            {
                printf(",");
            }
            DispBTree(b->rchild);
            printf(")");
        }
    }
}

/*遍历*/
/*7.先序遍历*/
void PreOrder(BTNode* b)
{
    if (b != NULL)
    {
        printf("%c", b->data);
        PreOrder(b->lchild);
        PreOrder(b->rchild);
    }
}

/*8.中序遍历*/
void InOrder(BTNode* b)
{
    if (b != NULL)
    {
        InOrder(b->lchild);
        printf("%c", b->data);
        InOrder(b->rchild);
    }
}

/*9.后序遍历*/
void PostOrder(BTNode* b)
{
    PostOrder(b->lchild);
    PostOrder(b->rchild);
    printf("%c", b->data);
}

/*菜单*/
void Menu()
{
    printf("\n");
    printf("\t\t\t二叉树基本操作学习系统\n");
    printf("\t\t\t	***主菜单***\n\n");
    printf("\t\t|	*1 创建一个二叉树\n");
    printf("\t\t|	*2 销毁二叉树\n");
    printf("\t\t|	*3 查找结点\n");
    printf("\t\t|	*4 找孩子结点\n");
    printf("\t\t|	*5 求高度\n");
    printf("\t\t|	*6 输出二叉树\n");
    printf("\t\t|	*7 先序遍历\n");
    printf("\t\t|	*8 中序遍历\n");
    printf("\t\t|	*9 后序遍历\n");
    printf("\t\t|	*0 结束程序\n");
}

/*主函数*/
int mian()
{
    Tree tree;
    BTNode  b;
    tree.root = NULL;//创建一个空树
    long start, end;
    Menu();
    printf("请输入操作对应的序列号\n");
    while (1)
    {
        int a;
        scanf_s("%d", &a);
        if (a != 0)
        {
            switch (a)
            {
            case 1:start = clock();
            {
                for (int i = 0; i < MaxSize; i++)//输入n个数并创建这个树
                {
                    int temp;
                    scanf_s("%d", &temp);
                    CreateBTree(&tree, temp);
                }
                end = clock();
                break;
            }
            case 2:start = clock();
            {
                DestroyBTree(&b);
                end = clock();
                break;
            }
            case 3:start = clock();
            {
                int c;
                scanf_s("%d", &c);
                FindNode(&b, c);
                end = clock();
                break;
            }
            case 4:start = clock();
            {
                LchildNode(&b);
                RchildNode(&b);
                end = clock();
                break;
            }
            case 5:start = clock();
            {
                BTHeight(&b);
                end = clock();
                break;
            }
            case 6:start = clock();
            {
                DispBTree(&b);
                end = clock();
                break;
            }
            case 7:start = clock();
            {
                PreOrder(&b);
                end = clock();
                break;
            }
            case 8:start = clock();
            {
                InOrder(&b);
                end = clock();
                break;
            }
            case 9:start = clock();
            {
                PostOrder(&b);
                end = clock();
                break;
            }
            case 0: break;
            default:
            {
                printf("输入有误，可重新选择，退出按 0！\n\n");
            }
            }
        }
        else {
            printf("二叉树不存在，请先创建二叉树\n\n");
            system("pause");
            system("CLS");
            Menu();
            if (a == 0)
            {
                break;
                end = clock();
                printf("该模块运行时间为%ld ms\n", end - start);
            }
        }
    }
    return 0;
}
```
