---
layout: post
title: '链队列各函数编程实现'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 链式结构 队列
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
typedef struct hhh
{
    ElemType data;
    struct hhh *next;
}qlink;
typedef struct
{
    qlink *front;
    qlink *rear;
}linkqueue;

int initqueue(linkqueue *L)
{
    L->front=L->rear=(qlink *)malloc(sizeof(qlink));
    L->front->next=NULL;
    printf("初始化成功\n");
    system("pause");
    return 0;
}

int creatqueue(linkqueue *L)
{
    if(L==NULL)
    return 0;
    qlink *q;
    int i,n;
    printf("请输入要创建队列的长度:\n");
    scanf("%d",&n);
    printf("请输入数据:\n");
    for(i=0;i<n;i++)
    {
        q=(qlink *)malloc(sizeof(qlink));
        if(!q)
        {
            printf("error\n");
            system("pause");
            return 0;
        }
        scanf("%d",&q->data);
        q->next=NULL;
        L->rear->next=q;
        L->rear=q;
    }
    printf("创建成功\n");
    system("pause");
    return 0;
}

int getlen(linkqueue *L)
{
    qlink *p;
    int i;
    p=L->front;
    for(i=0;p->next!=NULL;i++)
    {
        p=p->next;
    }
    printf("队列长度为:%d",i);
    system("pause");
    return 0;
}

int getfront(linkqueue *L)
{
    if(L->front==L->rear)
    return 0;
    ElemType x;
    x=L->front->next->data;
    printf("链队列的表头元素为%d",x);
    system("pause");
    return 0;
}

int inqueue(linkqueue *L)
{
    qlink *q;
    q=(qlink *)malloc(sizeof(qlink));
    if(!q)
    {
        printf("error\n");
        system("pause");
        return 0;
    }
    printf("请输入入列的数据:\n");
    scanf("%d",&q->data);
    q->next=NULL;
    L->rear->next=q;
    L->rear=q;
    printf("入列成功\n"); 
    system("pause");
    return 0;   
}

int outqueue(linkqueue *L)
{
    if(L->front==L->rear)
    {
        printf("队列空\n");
        system("pause");
        return 0;
    }
    qlink *p;
    p=L->front->next;
    L->front->next=p->next;
    if(L->rear==p)
    {
        L->rear=L->front;
    }
    free(p);
    printf("出列成功\n");
    return 0;
}

int emptyqueue(linkqueue *L)
{
    if(L->front==L->rear)
    printf("空队列\n");
    else
    {
        printf("非空队列\n");
    }
    system("pause");
    return 0;
}

int output(linkqueue *L)
{
    qlink *p;
    if(L->front==L->rear)
    {
        printf("空队列\n");
        system("pause");
        return 0;
    }
    p=L->front->next;
    while(p!=NULL)
    {
        printf("%d\t",p->data);
        p=p->next;
    }
    system("pause");
    return 0;
}

int hjx()
{
    int i;
    printf("输入1初始化链队列\n");
    printf("输入2创建长度为n的链列表\n");
    printf("输入3可得链队列表的长度\n");
    printf("输入4可得链队列的表头元素\n");
    printf("输入5对链队列入列\n");
    printf("输入6对链队列出列\n");
    printf("输入7判断是否空队列\n");
    printf("输入8输出链队列表的值\n\n");
    printf("请输入想要选择的功能\n");
    scanf("%d",&i);
    if(i<1||i>8)
    return 0;
    return i;
}

int main()
{
    linkqueue L;
    ElemType x;
    for(;;)
    {
        system("cls");
        switch(hjx())
        {
            case 1:
            initqueue(&L);continue;
            case 2:
            creatqueue(&L);continue;
            case 3:
            getlen(&L);continue;
            case 4:
            getfront(&L);continue;
            case 5:
            inqueue(&L);continue;
            case 6:
            outqueue(&L);
            system("pause");continue;
            case 7:
            emptyqueue(&L);continue;
            case 8:
            output(&L);continue;
        }
    }
}

```
