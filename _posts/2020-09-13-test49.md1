---
layout: post
title: '图的最短路径-floyd(弗洛伊德算法)'
date: 2020-09-12
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 图 最短路径
---
```c
#include<stdio.h>
#include<stdlib.h>
#define INFINITE 1000
#define Max 10		//预设最多顶点数
typedef struct
{
	int vexnum,arcnum,kind;		//顶点数，边(或弧)信息及图的种类	
	char vex[Max];			//存顶点信息的一维数组
	int arc[Max][Max];		//存边(或弧)信息的二维数组
}AdjMatrix;				//邻接矩阵存储结构类型名

//建立图的邻接矩阵
int Creadjm(AdjMatrix *G)
{
	int i,j,k,t;
	printf("输入顶点数，边数和图的种类(0为无向图,1为有向图):");
	scanf("%d%d%d",&G->vexnum,&G->arcnum,&G->kind);
	for(k=0;k<G->vexnum;k++)
	{
		G->vex[k]='A'+k;
	}
	for(i=1;i<=G->vexnum;i++)
	{
		for(j=1;j<=G->vexnum;j++)
		{
			G->arc[i][j]=1000;
		}
	}
	printf("请输入%d个边,1代表A,2代表B...以及对应的权值\n",G->arcnum);
	for(k=1;k<=G->arcnum;k++)
	{
		scanf("%d%d%d",&i,&j,&t);
		G->arc[i][j]=t;
		if(G->kind==0)
		{
			G->arc[j][i]=t;
		}
	}
}

//输出函数
int list(AdjMatrix *G)
{
	int i,j;
	for(i=0;i<G->vexnum;i++)
	{
		printf("\t%c",G->vex[i]);
	}
	printf("\n");
	for(i=1;i<=G->vexnum;i++)
	{
		printf("%c",G->vex[i-1]);
		for(j=1;j<=G->vexnum;j++)
		{
			printf("\t%d",G->arc[i][j]);
		}
		printf("\n");
	}
	//system("pause");
}

//floyd-佛洛伊德算法
void floyd(int n,int a[][Max],int path[][Max])
{
    int i,j,v;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            path[i][j]=-1;
        }
    }
    for(v=1;v<=n;v++)
    {
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=n;j++)
            {
                if(a[i][j]>a[i][v]+a[v][j])
                {
                    a[i][j]=a[i][v]+a[v][j];
                    path[i][j]=v;
                }
            }
        }
    }
}

//floyd算法的输出函数
void printpath(int u,int v,int path[][Max])
{
    if(path[u][v]==-1)
    {
        printf("(%d,%d) ",u,v);
    }
    else
    {
        int mid=path[u][v];
        printpath(u,mid,path);
        printpath(mid,v,path);
    }    
}

int listpath(int path[][Max],int n,AdjMatrix *G)
{
    int i,j;
    printf("path数组为:\n");
    for(i=0;i<G->vexnum;i++)
	{
		printf("\t%c",G->vex[i]);
	}
    printf("\n");
    for(i=1;i<=n;i++)
    {
        printf("%c",G->vex[i-1]);
        for(j=1;j<=n;j++)
        {
            printf("\t%d",path[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    int u,v;
    int path[Max][Max];
    AdjMatrix G;
    Creadjm(&G);
    list(&G);
    floyd(G.vexnum,G.arc,path);
    printf("\n");
    listpath(path,G.vexnum,&G);
    printf("\n");
    printf("经过floyd算法后的邻接矩阵为:\n");
    list(&G);
    printf("\n");
    for(;;)
    {
        printf("请输入一个源点和汇点(1代表A,2代表B)");
        scanf("%d%d",&u,&v);
        if(u==v)
        {
            printf("重新输入\n");
            system("pause");
            return 0;
        }
        printf("两点最短路径为:\n");
        printpath(u,v,path);
        printf("\n两点最短路径的长度为:%d",G.arc[u][v]);
        printf("\n");
        system("pause");
    }
}
```
