---
layout: post
title: '图的最小生成树-kruskal算法(克鲁斯卡尔)'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 图 最小生成树
---
```c
#include<stdio.h>
#include<stdlib.h>
#define MAXE 30
struct edges
{
    int bv,tv,w;    //边的信息,一条边的起始顶点bv,终止顶点tv,权值w
};
typedef struct edges edgeset[MAXE];
int seeks(int set[],int v)
{
    int i=v;
    while(set[i]>0)     //注意这里是个循环
    {
        i=set[i];
    }
    return i;
}
int kruskal(edgeset ge,int n,int e)     //ge表示的图是按权值从小到大排列的
{
    int set[MAXE],v1,v2,i,j;
    for(i=1;i<=n;i++)
    {
        set[i]=0;       //给set中的每个元素赋初值0
    }
    i=1;
    j=1;
    while(j<n && i<=e)      //n是顶点数,j是边数,j<n意思j=n-1，此时已遍历完所有顶点，已生成最小生成树，e是边数
    {
        v1=seeks(set,ge[i].bv);     //确定顶点bv所在的边集
        v2=seeks(set,ge[i].tv);     //确定顶点tv所在的边集
        if(v1!=v2)      //当bv，tv不在同一顶点集,确定该边应当选入生成树
        {
            printf("(%d,%d)",ge[i].bv,ge[i].tv);
            printf("\n");
            set[v1]=v2;
            j++;
        }
        i++;    //e是要生成最小生成树的图的所有边数，而边的信息由ge提供
    }
}

int main()
{
    edgeset ge={0,0,0,1,2,1,2,3,2,3,1,3};       //为了方便，ge[0]没有用到
    int n=3;
    int e=3;
    kruskal(ge,n,e);
    system("pause");
}
```
