---
layout: post
title: '二叉树的顺序存储结构'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 二叉树 顺序存储
---
```c
#include<stdio.h>
#include<stdlib.h>
#define VirNode '*'
#define MAX_TREE_SIZE 100
typedef char ElemType;
typedef ElemType SqBitTree[MAX_TREE_SIZE];

//输出函数
int levertree(SqBitTree bt)
{
    int t=6,x;
    int i=1,j;
    while(i<=bt[0])
    {
        x=t--;
        for(x;x>0;x--)
        {
            printf("\t");
        }
        for(j=i;j<i*2;j++)
        {
            if(bt[j]!=VirNode)
            {
                printf("\t%c",bt[j]);
            }
            else
            {
                printf("\t*");
            } 
        }
        i=i*2;
        printf("\n");  
    }
    printf("按满二叉树遍历输出成功\n");
    //system("pause");
    return 0;
}

//建立一个满二叉树,包含虚结点
int crebitree(SqBitTree bt)
{
    int n;
    printf("请输入真实结点的个数\n");
    scanf("%d",&n);
    fflush(stdin);
    int i=1,j,m=0;
    while(m<n)
    {
        for(j=i;j<2*i;j++)
        {
            scanf("%c",bt+j);
            if(bt[j]!=VirNode)
            {
                m++;
            }
        }
        i=i*2;
    }
    bt[0]=i-1;
    printf("\n建立树成功\n");
    system("pause");
    return 0;
}

//交换二叉树中所有的左右子树结点
int exchangetree(SqBitTree bt)
{
    int i,j,k=2;
    ElemType x;
    while(k<=bt[0])
    {
        for(i=k,j=2*k-1;i<j;i++,j--)
        {
            x=bt[i];
            bt[i]=bt[j];
            bt[j]=x;
        }
        k=k*2;
    }
    printf("交换成功\n");
    system("pause");
    return 0;
}

//统计叶子结点的个数算法
int countleaf(SqBitTree bt)
{
    int i,m=0;
    int k=1;
    while(k<=bt[0]/2)
    {
        for(i=k;i<2*k;i++)
        {
            if(bt[i]!=VirNode && bt[2*i]==VirNode && bt[2*i+1]==VirNode)
            {
                m++;
            }
        }
        k=k*2;
    }
    for(k=i;k<2*i;k++)
    {
        if(bt[k]!=VirNode)
        {
            m++;
        }
    }
    printf("叶子结点个数为%d\n",m);
    system("pause");
    return 0;
}

//求二叉树的高度算法
int high(SqBitTree bt)
{
    int k=1,m=0;
    while(k<=bt[0])
    {
        m++;
        k=k*2;
    }
    printf("二叉树的高度为%d\n",m);
    system("pause");
    return 0;
}

//统计度为2的结点个数
int count2(SqBitTree bt)
{
    int k=1,m=0,i;
    while(k<=bt[0]/2)
    {
        for(i=k;i<2*k;i++)
        {
            if(bt[i]!=VirNode && bt[2*i]!=VirNode && bt[2*i+1]!=VirNode)
            {
                m++;
            }
        }
        k=k*2;
    }
    printf("度为2的结点个数为%d\n",m);
    system("pause");
    return 0;
}

//统计度为1的结点个数
int count1(SqBitTree bt)
{
    int k=1,m=0,i;
    while(k<=bt[0]/2)
    {
        for(i=k;i<k*2;i++)
        {
            if(bt[i]!=VirNode && (bt[i*2]!=VirNode && bt[2*i+1]==VirNode || bt[i*2]==VirNode && bt[2*i+1]!=VirNode))
            {
                m++;
            }
        }
        k=k*2;
    }
	printf("度为1的结点个数为%d\n",m);
	system("pause");
}

//找出值为x的结点的双亲结点和左右孩子结点的值
int search(SqBitTree bt,ElemType x,ElemType *pa,ElemType *lc,ElemType *rc)
{
    int k=1,i=1;
    while(bt[i]!=x)
    {
        i++;
    }
    if(i>bt[0])
    {
        printf("该二叉树没有要寻找的值");
        *pa=*lc=*rc=VirNode;
        system("pause");
        return 0;
    }
    if(i==1)
    {
        printf("该结点没有双亲结点\n");
        *pa=VirNode;
    }
    else
    {
        *pa=bt[i/2];
		printf("该结点的双亲结点为%c\n",*pa);
    }
    if(i>bt[0]/2 || bt[2*i]==VirNode)
    {
        printf("该结点没有左孩子结点\n");
        *lc=VirNode;
    }
    else
    {
        *lc=bt[2*i];
        printf("该结点的左孩子结点为%c\n",*lc);
    }
    if(i>bt[0]/2 || bt[2*i+1]==VirNode)
    {
        printf("该结点没有右孩子结点\n");
        *rc=VirNode;
    }
    else
    {
        *rc=bt[2*i+1];
        printf("该结点的右孩子结点为%c\n",*rc);
    }
	printf("函数查找成功\n");
    system("pause");
    return 0;
}
//菜单函数
int hjx()
{
	int i;
	printf("输入1建立顺序存储的满二叉树(包含二叉树)\n");
	printf("输入2输出顺序存储的二叉树结点\n");
	printf("输入3交换二叉树中所有的左右子树结点\n");
	printf("输入4统计叶子结点的个数\n");
	printf("输入5求二叉树的高度算法\n");
	printf("输入6统计度为2的结点个数\n");
	printf("输入7统计度为1的结点个数\n");
	printf("输入8找出值为x的结点的双亲结点和左右孩子结点的值\n\n");
	printf("输入你想要选择的功能\n");
	scanf("%d",&i);
	return i;
}


int main()
{
	SqBitTree bt;
	ElemType x,*pa,*lc,*rc;
	pa=(ElemType *)malloc(sizeof(ElemType));
	lc=(ElemType *)malloc(sizeof(ElemType));
	rc=(ElemType *)malloc(sizeof(ElemType));
	for(;;)
	{
		system("cls");
		switch(hjx())
		{
			case 1:
			crebitree(bt);continue;
			case 2:
			levertree(bt);
			system("pause");continue;
			case 3:
			exchangetree(bt);continue;
			case 4:
			countleaf(bt);continue;
			case 5:
			high(bt);continue;
			case 6:
			count2(bt);continue;
			case 7:
			count1(bt);continue;
			case 8:
			printf("二叉树结点有\n");
			levertree(bt);
			printf("\n输入该结点的值\n");
			fflush(stdin);
			scanf("%c",&x);
			search(bt,x,pa,lc,rc);continue;
			default:
			printf("输入错误,请重新输入\n");
			system("pause");
		}
	}
}

```
