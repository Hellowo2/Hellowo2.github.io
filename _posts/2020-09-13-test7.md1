---
layout: post
title: '单链表操作第二版'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 线性结构 顺序存储
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
typedef struct node
{
	ElemType date;
	struct node *next;
}slink;

//尾插法
slink *creslink_tail()
{
	slink *p,*s,*head;
	int i,n;
	printf("输入想建立的链表长度:");
	scanf("%d",&n);
	if(n<0)
	{
		printf("error");
		return 0;
	}
	p=head=(slink *)malloc(sizeof(slink));
	for(i=0;i<n;i++)
	{
		s=(slink *)malloc(sizeof(slink));
		if(s==NULL)
		{
			printf("error");
			return 0;
		}
		scanf("%d",&s->date);
		p->next=s;
		p=s;
	}
	p->next=NULL;
	printf("尾插法建立成功");
	system("pause");
	return head;
}

//头插法
slink *creslink_head()
{
	slink *p,*s,*head;
	int i,n;
	printf("输入想建立的链表长度:");
	scanf("%d",&n);
	if(n<0)
	{
		printf("error");
		return 0;
	}
	p=head=(slink *)malloc(sizeof(slink));
	if(head==NULL)
	{
		printf("error");
		return 0;
	}
	p->next=NULL;
	for(i=0;i<n;i++)
	{
		s=(slink *)malloc(sizeof(slink));
		if(s==NULL)
		{
			printf("error");
			return 0;
		}
		scanf("%d",&s->date);
		s->next=p->next;
		p->next=s;
	}
	printf("头插法建立成功");
	system("pause");
	return head;
}


int getlen(slink *head)
{
	slink *p;
	int i=0;
	p=head->next;
	while(p!=NULL)
	{
		p=p->next;
		i++;
	}
	printf("链表长度为：%d",i);
	system("pause");
} 


int locate(slink *head)
{
	slink *p;
	ElemType x;
	printf("输入想要定位的数据");
	scanf("%d",&x);
	int i=0;
	p=head->next;
	while(p!=NULL&&p->date!=x)
	{
		i++;
		p=p->next;
	}
	if(p)
	{
	printf("此数据的位序为%d",i);
	system("pause");
	}
	else
	{
		printf("找不到此数据");
		system("pause");
		return 0;
	}	
}


int getelem(slink *head)
{
	slink *p;
	int j,i;
	ElemType e;
	printf("输入你想取的元素的位序号:");
	scanf("%d",&i);
	p=head;
	if(i<1)
	{
		printf("error");
		return 0;
	}
	for(j=0;j<i,p!=NULL;j++)
	{
		p=p->next;
	}
	if(p==NULL)
	return 0;
	e=p->date;
	printf("此数据为%d",e);
	system("pause");
	return 1;
}


int del(slink *head)
{
	slink *p,*q;
	int j,i;
	ElemType e;
	printf("输入你想删除的元素的位序号");
	scanf("%d",&i);
	if(i<1)
	{
		printf("error");
		return 0;
	}
	p=head;
	for(j=0;j<i-1&&p->next!=NULL;j++)
	{
		p=p->next;
	}
	if(p->next==NULL)
	{
		printf("error");
		return 0;
	}
	q=p->next;
	p->next=q->next;
	e=q->date;
	printf("删除的数据为%d",e);
	free(q);
	system("pause");
	return 1;
}


int insert(slink *head)
{
	slink *p,*s;
	int j,i;
	ElemType e;
	printf("输入在第几个结点插入以及插入的数据");
	scanf("%d%d",&i,&e);
	if(i<1)
	{
		printf("error");
		return 0;
	}
	p=head;
	for(j=0;j<i-1&&p!=NULL;j++)
	{
		p=p->next;
	}
	if(!p)
	{
		printf("error");
		return 0;
	}
	s=(slink *)malloc(sizeof(slink));
	s->date=e;
	s->next=p->next;
	p->next=s;
	printf("插入成功");
	system("pause");
	return 1;
}

int list(slink *head)
{
	slink *p;
	if(head->next==NULL||head==NULL)
	{
		printf("空表  错误");
		system("pause");
		return 0;
	}
	p=head->next;
	while(p!=NULL)
	{
		//p=p->next;
		printf("%d\t\t",p->date);
		p=p->next;
	}
	system("pause");
	return 0;
}

int hjx()
{
	int i;
	printf("输入1用尾插法建立单链表\n");
	printf("输入2用头插法建立单链表\n");
	printf("输入3可得单链表长度\n");
	printf("输入4可得输入数据的的位序\n");
	printf("输入5可得输入位序对应的数据\n");
	printf("输入6可删除元素\n");
	printf("输入7可插入元素\n");
	printf("输入8输出数据\n");
	printf("输入9释放链表\n\n");
	printf("输入想要选择的功能");
	scanf("%d",&i);
	return i;
}

slink *release(slink *L1)
{
	if(L1->next==NULL||L1==NULL)
	{
		printf("空表  错误");
		system("pause");
		return 0;
	}
    slink *p,*q;
    p=L1->next;
    while(p!=NULL)
    {
        q=p->next;
        free(p);
        p=q;
    }
	L1->next=NULL;
	printf("释放成功\n");
	system("pause");
	return L1;
}

int main()
{
	slink *L;
	int j;
	for(;;)
	{
		system("cls");
		switch(hjx())
		{
			case 1:
			L=creslink_tail();
			printf("尾插法建立成功");continue;
			case 2:
			L=creslink_head();
			printf("头插法建立成功");continue;
			case 3:
			getlen(L);
			continue;
			case 4:
			locate(L);
			continue;
			case 5:
			getelem(L);continue;
			case 6:
			del(L);continue;
			case 7:
			insert(L);continue;
			case 8:
			list(L);continue;
			case 9:
			L=release(L);continue;
			//system("pause");
		}
		system("pause");
	}
}
```
