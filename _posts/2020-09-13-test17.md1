---
layout: post
title: '哈夫曼树的编码操作'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 哈夫曼树
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef float ElemType;
struct BTreeNode
{
    ElemType data;  //存储结点数据
    char node;  //存储结点的字符
    struct BTreeNode* left; //指向结点的左孩子
    struct BTreeNode* right;    //指向结点的右孩子
};
 

//根据数组 a 中 n 个权值建立一棵哈夫曼树，返回树根指针
struct BTreeNode* CreateHuffman(ElemType a[], int n,char c[])    //传存储权值的数组地址，和权值的个数
{
    int i, j;
    struct BTreeNode **b, *q;
    b = (struct BTreeNode **)malloc(n*sizeof(struct BTreeNode *));  //二级指针指向n个一级指针大小的内存空间
    for (i = 0; i < n; i++) //初始化b指针数组，使每个指针元素指向a数组中对应的元素结点
    {
        b[i] = (struct BTreeNode *)malloc(sizeof(struct BTreeNode));    //一级指针指向结构体大小的大小空间
        b[i]->data = a[i];
        b[i]->node=c[i];  //给每个一级指针的data赋值
        b[i]->left = b[i]->right = NULL;    //左孩子和右孩子暂无，即指向null
    }
    for (i = 1; i < n; i++)//进行 n-1 次循环建立哈夫曼树
    {
        //k1表示森林中具有最小权值的树根结点的下标，k2为次最小的下标
        int k1 = -1, k2;
        for (j = 0; j < n; j++)//让k1初始指向森林中第一棵树，k2指向第二棵
        {
            if (b[j] != NULL && k1 == -1)
            {
                k1 = j;
                continue;
            }
            if (b[j] != NULL)
            {
                k2 = j;
                break;
            }
        }
        for (j = k2; j < n; j++)//从当前森林中求出最小权值树的下标k1和次最小的下标k2
        {
            if (b[j] != NULL)
            {
                if (b[j]->data < b[k1]->data)
                {
                    k2 = k1;
                    k1 = j;
                }
                else if (b[j]->data < b[k2]->data)
                    k2 = j;
            }
        }
        //由最小权值树和次最小权值树建立一棵新树，q指向树根结点(此时已知道k1和k2的下标)
        q =(struct BTreeNode *)malloc(sizeof(struct BTreeNode));    //新结构体指针指向一个开辟内存空间
        q->data = b[k1]->data + b[k2]->data;    //新结构体指针的data赋值了k1和k2的权值和
        q->left = b[k1];    //q成为了下标为k1的父亲结点
        q->right = b[k2];   //q成为了下标为k2的父亲结点
 
        b[k1] = q;//b指针数组中k1位置的指针指向了父亲结点q
        b[k2] = NULL;//k2位置为空(此时下标为k2已废弃，用不着了)
    }
    free(b); //删除动态建立的数组b
    return q; //返回整个哈夫曼树的树根指针
}
 

//哈夫曼编码
void HuffManCoding(struct BTreeNode *T, int length)//length初始值为0
{
    static int a[10];//定义静态数组a，保存每个叶子的编码，数组长度至少是树深度减一
    if (T != NULL)//访问到叶子结点时输出其保存在数组a中的0和1序列编码
    {
        if (T->left == NULL && T->right == NULL)    //T为叶子结点
        {
            int i;
            printf("字符%c的编码：", T->node);
            for (i = 0; i < length; i++)
                printf("%d", a[i]);
            printf("\n");
        }
        else//访问到非叶子结点时分别向左右子树递归调用，并把分支上的0、1编码保存到数组a的对应元素中
        {   
            a[length] = 0;
            HuffManCoding(T->left, length + 1);//向下深入一层时len值增1
            a[length] = 1;
            HuffManCoding(T->right, length + 1);//向下深入一层时len值增1
        }
    }
}
 
//主函数
int main()
{
    int n, i;
    ElemType a[100];
    char b[100];
    struct BTreeNode *T;
    printf("从键盘输入待构造的哈夫曼树中带权叶子结点数n：");
    while(1)
    {
        scanf("%d", &n);
        if (n > 1)
            break;
        else
            printf("重输n值：");
    }
    fflush(stdin);
    printf("请输入%d个字符\n",n);
    for (i = 0; i < n; i++)
        scanf("%c", &b[i]);
    printf("从键盘输入%d个数作为字符对应的权值：", n);
    for (i = 0; i < n; i++)
        scanf("%f", &a[i]);
    T = CreateHuffman(a,n,b);
    printf("树中每个叶子结点的哈夫曼编码：\n");
    HuffManCoding(T, 0);
    system("pause");
}
```
