---
layout: post
title: '双链表各个函数实现编程'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 双链表
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
typedef struct hhh
{
    ElemType data;
    struct hhh *next;
    struct hhh *prior;
}dlink;

dlink *initsize()
{
    dlink *head;
    head=(dlink *)malloc(sizeof(dlink));
    if(!head)
    {
        printf("error");
        system("pause");
        return 0;
    }
    head->next=NULL;
    head->prior=NULL;
    system("pause");
    return head;
}

int creatlisttail(dlink *head)
{
    dlink *p,*q;
    p=head;
    int n,i;
    //ElemType x;
    printf("请输入要建双链表的长度:\n");
    scanf("%d",&n);
    printf("请输入数据：\n");
    for(i=0;i<n;i++)
    {
        q=(dlink *)malloc(sizeof(dlink));
        if(!q)
        {
            printf("error");
            system("pause");
            return 0;
        }
        scanf("%d",&q->data);
        q->next=p->next;    
        q->prior=p;
        p->next=q;
        p=q;
    }
    printf("尾插法创建双链表成功\n");
    system("pause");
    return 0;
}

int creatlisthead(dlink *head)
{
    dlink *p,*q;
    p=head;
    int i,n;
    printf("请输入双链表的长度:\n");
    scanf("%d",&n);
    printf("请输入数据\n");
    for(i=0;i<n;i++)
    {
        q=(dlink *)malloc(sizeof(dlink));
        if(!q)
        {
            printf("error");
            system("pause");
            return 0;
        }
        scanf("%d",&q->data);
        q->next=p->next;
        if(p->next!=NULL)
        {
            p->next->prior=q;
        }
        q->prior=p;
        p->next=q;
    }
    printf("头插法创建双链表成功\n");
    system("pause");
    return 0;
}

int getlen(dlink *head)
{
    int j=0,i=0;
    dlink *p;
    p=head;
    if(head->next==NULL)
    {
        printf("空表");
        system("pause");
        return 0;
    }
    //p=head;
    for(j;p->next!=NULL;j++)
    {
        p=p->next;
    }
    printf("从正方向表的长度尾%d\n\n",j);
    for(i;p!=head;i++)
    {
        p=p->prior;
    }
    printf("从负方向表的长度尾%d\n",i);
    system("pause");
    return 0;
}

int getelem(dlink *head)
{
    int i,j;
    dlink *p;
    p=head->next;
    printf("请输入你位序\n");
    scanf("%d",&i);
    if(i<1)
    {
        printf("请重新输入\n");
        system("pause");
        return 0;
    }
    for(j=1;j<i&&p!=NULL;j++)
    {
        p=p->next;
    }
    if(p==NULL)
    {
        printf("超过链表\n");
        system("pause");
        return 0;
    }
    printf("第%d位序的数据为%d",i,p->data);
    system("pause");
    return 0;
}

int locate(dlink *head)
{
    ElemType x;
    int j;
    dlink *p;
    p=head->next;
    printf("请输入要定位的数据:");
    scanf("%d",&x);
    for(j=1;p->data!=x&&p!=NULL;j++)
    {
        p=p->next;
    }
    if(p==NULL)
    {
        printf("链表没有该数据\n");
        system("pause");
        return 0;
    }
    printf("该数据的位序为%d",j);
    system("pause");
    return 0;
}

int del(dlink *head)
{
    dlink *p,*q;
    p=head->next;
    int i,j;
    printf("请输入想要删除的结点位序\n");
    scanf("%d",&i);
    if(i<1)
    {
        printf("请重新输入\n");
        system("pause");
        return 0;
    }
    for(j=1;j<i-1&&p->next!=NULL;j++)
    {
        p=p->next;
    }
    if(p->next==NULL)
    {
        printf("请重新输入\n");
        system("pause");
        return 0;
    }
    q=p->next;
    if(q->next!=NULL)
    {
        q->next->prior=p;
    }
    p->next=q->next;
    free(q);
    system("pause");
    return 0;
}

int insert(dlink *head)
{
    dlink *p,*q;
    p=head;
    ElemType x;
    int i,j;
    printf("请输入在第几个结点前插入数据\n");
    scanf("%d",&i);
    if(i<1)
    {
        printf("请重新输入\n");
        system("pause");
        return 0;
    }
    printf("插入的数据为\n");
    scanf("%d",&x);
    for(j=0;j<i-1&&p->next!=NULL;j++)
    {
        p=p->next;
    }
    q=(dlink *)malloc(sizeof(dlink));
    if(!q)
    {
        printf("error");
        system("pause");
        return 0;
    }
    q->data=x;
    q->next=p->next;
    if(p->next!=NULL)
    {
        p->next->prior=q;
    }
    q->prior=p;
    p->next=q;
    system("pause");
    return 0;
}

int list(dlink *head)
{
    dlink *p;
    p=head;
    printf("正方向输出\n");
    while(p->next!=NULL)
    {
        p=p->next;
        printf("%d\t",p->data);
    }
    printf("\n负方向输出\n");
    while(p!=head)
    {
        printf("%d\t",p->data);
        p=p->prior;
    }
    system("pause");
    return 0;
}

dlink *release(dlink *L1)
{
	if(L1->next==NULL||L1==NULL)
	{
		printf("空表  错误");
		system("pause");
		return 0;
	}
    dlink *p,*q;
    p=L1->next;
    while(p!=NULL)
    {
        q=p->next;
        free(p);
        p=q;
    }
	L1->next=NULL;
    L1->prior=NULL;
	printf("释放成功\n");
	system("pause");
	return L1;
}

int hjx()
{
	int i;
    printf("输入1初始化双链表\n");
	printf("输入2用尾插法建立双链表\n");
	printf("输入3用头插法建立双链表\n");
	printf("输入4可得双链表长度\n");
	printf("输入5可得输入数据的的位序\n");
	printf("输入6可得输入位序对应的数据\n");
	printf("输入7可删除元素\n");
	printf("输入8可插入元素\n");
	printf("输入9输出数据\n");
	printf("输入10释放链表\n\n");
	printf("输入想要选择的功能");
	scanf("%d",&i);
	return i;
}

int main()
{
	dlink *L;
	for(;;)
	{
		system("cls");
		switch(hjx())
		{
            case 1:
            L=initsize();continue;
			case 2:
			creatlisttail(L);
			printf("尾插法建立成功");continue;
			case 3:
			creatlisthead(L);
			printf("头插法建立成功");continue;
			case 4:
			getlen(L);continue;
			case 6:
			locate(L);
			continue;
			case 5:
			getelem(L);continue;
			case 7:
			del(L);continue;
			case 8:
			insert(L);continue;
			case 9:
			list(L);continue;
			case 10:
			L=release(L);continue;
			//system("pause");
		}
		system("pause");
	}
}
```
