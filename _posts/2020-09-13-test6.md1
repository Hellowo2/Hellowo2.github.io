---
layout: post
title: '顺序表操作'
date: 2020-09-12
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 线性结构 顺序存储
---
```c
#include<stdio.h>
#include<stdlib.h>
typedef int ElemType;
#define SIZE 100
//结构体类型
typedef struct
{
    ElemType *data;
    int length;
    int listsize;
}sqlist;
//函数声明
int output(sqlist *L1);

//初始化顺序表
int initlist(sqlist *L1)
{
    L1->data=(ElemType *)malloc(sizeof(ElemType)*SIZE);
    if(!L1->data)
    {
        printf("error");
        return 0;
    }
    L1->length=0;
    L1->listsize=SIZE;
    printf("初始化成功\n");
    system("pause");
    return 0;
}

//自定义顺序表长度
int creatlist(sqlist *L1)
{
    ElemType x;
    int n;
    printf("输入顺序表的长度  ");
    scanf("%d",&n);
    printf("请输入你的数据\n");
    for(int i=0;i<n;i++)
    {
        if(L1->length==L1->listsize)
        {
            realloc(L1->data,(L1->length+1)*sizeof(ElemType));
            if(!L1->data)
            {
                printf("error");    //内存分配不成功退出函数
                return 0;
            }
            L1->listsize++;
        }
        scanf("%d",&L1->data[i]);
        L1->length++;           //增加一个元素，顺序表长度加1
    }
    printf("创建成功\n");
    system("pause");
    return 0;
}

//删除函数
int del(sqlist *L1)
{
    int j,t;
    printf("删除前的数据为\n");
    output(L1);
    printf("\n输入你想要删除数据的位序\n");
    scanf("%d",&t);
    if(t<1||t>L1->length)
    {
        printf("error");
        return 0;
    }
    printf("你要删除的数据为%d",L1->data[t-1]);
    for(j=t-1;j<L1->length-1;j++)
    {
        L1->data[j]=L1->data[j+1];  //位序为t后的结点向前移动
    }
    L1->length--;       //删除一个元素，顺序表长度减一
    printf("删除后的数据为\n");
    output(L1);
    printf("\n");
    system("pause");
    return 0;
}

//使位序为t后的结点往前移动一位
int delwork(sqlist *L1,int t)
{
    int j;
    for(j=t-1;j<L1->length-1;j++)
    {
        L1->data[j]=L1->data[j+1];
    }
    L1->length--;
}

//删除值相同的多余结点
int del_extra(sqlist *L1)
{
    int i,j;
    int *list=(int *)malloc((L1->length-1)*sizeof(int));    //分配内存来存储要删除的结点的位序
    int k=0;
    printf("删除多余结点数据前:\n");
    output(L1);
    for(i=0;i<L1->length;i++)
    {
        for(j=i+1;j<L1->length;j++)
        {
            if(L1->data[i]==L1->data[j])
            {
                list[k]=j+1;  //存储要删除的结点的位序，不是下标
                k++;
            }
        }
    }
    for(i=0;i<k;i++)
    {   
        delwork(L1,list[i]);    //传输要删除的结点的位序
    }
    printf("删除多余结点数据后:\n");
    output(L1);
    system("pause");
}

//插入元素函数
int insert(sqlist *L1)
{
    int i,t,j;
    ElemType x;
    printf("插入前的数据为");
    output(L1);
    printf("\n输入在第几个结点前插入数据\n");
    scanf("%d",&t);
    printf("添加的数据为:\n");
    scanf("%d",&x);
    if(t<1||t>L1->length+1)
    {
        printf("error");
        return 0;
    }
    if(L1->length==L1->listsize)
    {
        realloc(L1->data,(L1->length+1)*sizeof(ElemType));
        if(!L1->data)
        {
            printf("error");
            return 0;
        }
        L1->listsize++ ;  
    }
    for(j=L1->length;j>t-1;j--)
    {
        L1->data[j]=L1->data[j-1];
    }
    L1->data[t-1]=x;
    L1->length++;
    printf("插入后的数据为\n");
    output(L1);
    printf("\n");
    system("pause");
    return 0;
}

//从尾部插入元素
int insert_tail(sqlist *L1)
{
    if(L1->length==L1->listsize)
    {
        realloc(L1->data,(L1->length+1)*sizeof(ElemType));
        if(!L1->data)
        {
            printf("error");
            return 0;
        }
        L1->listsize++;
    }
    printf("插入前的数据为:\n");
    output(L1);
    printf("请输入要从尾部插入的数据:\n");
    scanf("%d",&L1->data[L1->length++]);
    printf("\n插入后的数据为:\n");
    output(L1);
    system("pause");
}

//升序顺表，并插元素
int increaselist(sqlist *L1)
{
    ElemType x;
    int i,j,m=1;
    if(L1->length==L1->listsize)
    {
        realloc(L1->data,(L1->length+1)*sizeof(ElemType));
        if(!L1->data)
        {
            printf("error");
            return 0;
        }
        L1->listsize++ ;  
    }
    printf("算法前的数据为:\n");
    output(L1);
    for(i=0;m&&i<L1->length-1;i++)
    {
        for(j=0,m=0;j<L1->length-1-i;j++)
        {
            if(L1->data[j]>L1->data[j+1])
            {
                int t;
                t=L1->data[j];
                L1->data[j]=L1->data[j+1];
                L1->data[j+1]=t;
                m=1;
            }
        }
    }
    printf("排序后的数据:\n");
    output(L1);
    printf("\n请输入一个数据，并放在递增有序的顺序表的合适的位置中:\n");
    scanf("%d",&x);
    for(i=0;i<L1->length;)
    {
        if(x>L1->data[i])
        {
            i++;
        }
        else
        {
            break;
        }   
    }
    i++;
    for(j=L1->length-1;j>=i-1;j--)
    {
        L1->data[j+1]=L1->data[j];
    }
    L1->data[i-1]=x;
    L1->length++;
    printf("插入后的数据为:\n");
    output(L1);
    printf("\n");
    system("pause");
    return 0;
}

//菜单函数
int hjx()
{
	int i;
	printf("输入1初始化顺序表\n");
	printf("输入2创建长度为n的顺序表\n");
	printf("输入3可删除顺序表第i个元素\n");
    printf("输入4可删除数据相同的多余结点\n");
	printf("输入5可插入元素\n");
	printf("输入6可从顺序表尾部插入新元素\n");
	printf("输入7按递增有序排序顺序表结点,并插入一个元素到顺序表合适的位置\n");
    printf("输入8释放顺序表结点\n");
    printf("输入9对输出顺序表数据:\n\n");
	printf("输入想要选择的功能:  ");
	scanf("%d",&i);
	return i;
}

//释放顺序表
int release(sqlist *L1)
{
    free(L1->data);
    L1->listsize=0;
    L1->length=0;
    printf("释放成功\n");
    system("pause");
    return 0;
}

//输出函数
int output(sqlist *L1)
{
    int i;
    for(i=0;i<L1->length;i++)
    {
        printf("%d\t",L1->data[i]);
    }
    printf("\n");
    if(i==0)
    printf("空表\n");
    return 0;
}

//主函数
int main()
{
    sqlist L;
	for(;;)
	{
		system("cls");
		switch(hjx())
		{
			case 1:
			initlist(&L);continue;
			case 2:
			creatlist(&L);continue;
			case 3:
			del(&L);
			continue;
			case 4:
			del_extra(&L);
			continue;
			case 5:
			insert(&L);continue;
			case 6:
			insert_tail(&L);continue;
			case 7:
			increaselist(&L);continue;
			case 8:
			release(&L);continue;
			case 9:
			output(&L);
            system("pause");continue;
		}
		system("pause");
	}
}
```
