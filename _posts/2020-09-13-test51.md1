---
layout: post
title: '图的最小生成树-prim(普里姆算法)'
date: 2020-09-13
author: lalalla
cover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'
tags: c语言 数据结构 图 最小生成树
---
```c
#include<stdio.h>
#include<stdlib.h>
#define Max 30
#define MAXCOST 1000

typedef struct
{
	int vexnum,arcnum,kind;		//顶点数，边(或弧)信息及图的种类	
	char vex[Max];			//存顶点信息的一维数组
	int arc[Max][Max];		//存边(或弧)信息的二维数组
}AdjMatrix;				//邻接矩阵存储结构类型名

//该代码中的二维数组为了方便描述,统一没有采用下标为0,如a[0][i],a[i][0]等
void prim(int c[Max][Max],int n)
{
    int i,j,k,min,lowcost[Max],closest[Max];//lowcost数组纪录剩余结点到已生成图的最短距离，closest数组记录剩余
    for(i=2;i<=n;i++)                       //结点到已生成图的最短距离的该结点的下标   
    {
        lowcost[i]=c[1][i];     //存储其余结点到下标为1的结点的距离
        closest[i]=1;      //开始情况，其余结点到达已生成图(此时只有一个结点)中最近的结点是下标为1的结点
    }
    closest[1]=0;   //表示下标为1的结点已成为生成图的结点
    for(i=2;i<=n;i++)
    {
        min=MAXCOST;
        k=i;
        for(j=1;j<=n;j++)   //此出for循环是找出剩余结点的lowcost数组中的最小值,并用k保存其下标
        {
            if(lowcost[j]<min && closest[j]!=0)
            {
                min=lowcost[j];
                k=j;
            }
        }
        printf("(%d,%d) ",closest[k],k);    //输出剩余结点中距离已生成图的结点的最短距离的两者下标
        closest[k]=0;   //表示下标为k的结点已加入生成图
        for(j=2;j<=n;j++)   //此处for循环开始时,虽然上面已有两个结点加入生成图，但只知道下标为1的结点，另一个不知道
        {                   //故j还是从2开始
            if(closest[j]!=0 && c[k][j]<lowcost[j])    //判断剩余的结点到新加入生成图的下标为k的结点的距离和
            {                                           //原本的lowcost的两者大小
                lowcost[j]=c[k][j];     //更新lowcost值
                closest[j]=k;   //下标为j的结点到已生成图中的下标为k的结点最近
            }
        }
    }
}


//建立图的邻接矩阵
int Creadjm(AdjMatrix *G)
{
	int i,j,k,t;
	printf("输入顶点数，边数和图的种类(0为无向图,1为有向图):");
	scanf("%d%d%d",&G->vexnum,&G->arcnum,&G->kind);
	for(k=0;k<G->vexnum;k++)
	{
		G->vex[k]='A'+k;
	}
	for(i=1;i<=G->vexnum;i++)
	{
		for(j=1;j<=G->vexnum;j++)
		{
			G->arc[i][j]=MAXCOST;
		}
	}
	printf("请输入%d个边以及所对应的权值\n",G->arcnum);
	for(k=1;k<=G->arcnum;k++)
	{
		scanf("%d%d%d",&i,&j,&t);
		G->arc[i][j]=t;
		if(G->kind==0)
		{
			G->arc[j][i]=t;
		}
	}
}

//输出函数
int list(AdjMatrix *G)
{
	int i,j;
	for(i=0;i<G->vexnum;i++)
	{
		printf("\t%c",G->vex[i]);
	}
	printf("\n");
	for(i=1;i<=G->vexnum;i++)
	{
		printf("%c",G->vex[i-1]);
		for(j=1;j<=G->vexnum;j++)
		{
			printf("\t%d",G->arc[i][j]);
		}
		printf("\n");
	}
	//system("pause");
}

//主函数
int main()
{
	AdjMatrix G;
	Creadjm(&G);
	list(&G);
    printf("\n");
    printf("普里姆算法后的最小生成树的边有:\n");
    prim(G.arc,G.vexnum);
    system("pause");
}
```
